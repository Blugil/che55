[{"C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\index.js":"1","C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\app.js":"2","C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\components\\home.js":"3","C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\components\\game.js":"4"},{"size":235,"mtime":1610292009372,"results":"5","hashOfConfig":"6"},{"size":3538,"mtime":1610292658763,"results":"7","hashOfConfig":"6"},{"size":1730,"mtime":1610292009372,"results":"8","hashOfConfig":"6"},{"size":3576,"mtime":1610292408030,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mf50uu",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\index.js",[],"C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\app.js",["20"],"C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\components\\home.js",[],"C:\\Users\\shuff\\Documents\\GitHub\\che55\\frontend\\src\\components\\game.js",["21"],"import Chessboard from \"chessboardjsx\";\r\nimport React from 'react';\r\nimport \"../game.scss\";\r\nconst Chess = require(\"chess.js\");\r\n\r\nexport default class Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            game: new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"),\r\n            fen: \"start\",\r\n            dropSquareStyle: {},\r\n            pieceSquare: \"\",\r\n            square: \"\",\r\n            history: [],\r\n            gameOver: \"\"\r\n        };\r\n\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.makeMove = this.makeMove.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //starts a listener on component mount that listens for moves \r\n        this.props.socket.on(\"playerMove\", this.makeMove);\r\n    }\r\n\r\n    // Receive a move from the server\r\n    makeMove = (receivedMove) => {\r\n\r\n\r\n        let move = this.state.game.move(receivedMove);\r\n\r\n        //double checks for valid move (even though its already checked)\r\n        if (move === null) return;\r\n\r\n        // Update game state\r\n        this.setState(({ history, pieceSquare }) => ({\r\n            fen: this.state.game.fen(),\r\n            history: this.state.game.history({ verbose: true })\r\n        }));\r\n        //checks after move if game is over\r\n        if (this.state.game.game_over()) {\r\n\r\n            let game_over_string = \"Player \" + this.props.state.playerNo + \" wins!!\"\r\n            this.setState({\r\n                gameOver: game_over_string\r\n            })\r\n        }\r\n    }\r\n\r\n    // React to a player move\r\n    // TODO: Prevent player from moving off-turn\r\n    onDrop = ({ sourceSquare, targetSquare}) => {\r\n        //checks if both player move and both players connected\r\n        if (this.props.state.gamePlayable && this.props.state.playerTurn) {\r\n            let move = this.state.game.move({\r\n                from: sourceSquare,\r\n                to: targetSquare,\r\n                promotion: \"q\"\r\n            });\r\n\r\n            // Illegal move\r\n            if (move === null) return;\r\n\r\n            // Update game state\r\n            this.setState(({ history, pieceSquare }) => ({\r\n                fen: this.state.game.fen(),\r\n                history: this.state.game.history({ verbose: true })\r\n            }));\r\n            \r\n            // Use socket to send move\r\n            this.props.socket.emit(\"playerMove\", move);\r\n            \r\n            //checks after move if game is over\r\n            if (this.state.game.game_over()) {\r\n                this.props.socket.emit('gameOver', this.props.state.playerNo);\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"flex-center\" style={{ backgroundColor: '#FFFAF0', fontFamily: 'Arial, Helvetica, sans-serif' }}>\r\n                <div style={{ color: '#008B8B', textAlign: 'center', fontSize: '150%'}}>\r\n                    <h1>GAME</h1>\r\n                </div>\r\n                <h3>Game code: {this.props.state.gameCode}</h3>\r\n                <button onClick={this.props.quitGame}>\r\n                    <p>Quit game</p>\r\n                </button>\r\n                <br></br>\r\n                    <div style={{ color: '#20B2AA' }}>{this.props.state.winner}</div>\r\n                <br></br>\r\n\r\n                <Chessboard\r\n                    orientation={this.props.state.playerNo == 2 ? 'black' : 'white'}\r\n                    position={this.state.fen}\r\n                    onDrop={this.onDrop}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}",["22","23"],{"ruleId":"24","severity":1,"message":"25","line":68,"column":20,"nodeType":"26","messageId":"27","endLine":68,"endColumn":22},{"ruleId":"24","severity":1,"message":"25","line":101,"column":60,"nodeType":"26","messageId":"27","endLine":101,"endColumn":62},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-global-assign","no-unsafe-negation"]